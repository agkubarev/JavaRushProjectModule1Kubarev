from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes

from credentials import ChatGPT_TOKEN
from util import load_message, send_image, send_text, show_main_menu, \
                 load_prompt, send_text_buttons
from gpt import ChatGptService


async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –∏–∑ chat GPT"""
    prompt = load_prompt('random')
    await send_image(update, context, 'random')
    message = load_message('random')
    message = await send_text(update, context, message)
    answer = await chat_gpt.send_question(prompt, '')
    await message.edit_text(answer)


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ 'gpt' """
    context.user_data['mode'] = 'gpt'
    prompt = load_prompt('gpt')
    message = load_message('gpt')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'gpt')
    await send_text(update, context, message)


async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å chat GPT"""
    if context.user_data['mode'] == 'recomend':
        text = f"recomend_type={context.user_data['recomend_type']}"
        text = f"{text} recomend_wishes={context.user_data['recomend_wishes']}"
    else:
        text = update.message.text

    message = await send_text(update, context, '–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...')
    answer_gpt = await chat_gpt.add_message(text)

    if context.user_data['mode'] == 'quiz':
        if answer_gpt == '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!':
            context.user_data['right_answers'] += 1
        answer_gpt = f"{answer_gpt}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {context.user_data['right_answers']}"
        await send_text_buttons(update, context, answer_gpt, {
            'quiz_more': '–ï—â—ë –≤–æ–ø—Ä–æ—Å'})
    else:
        await message.edit_text(answer_gpt)


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –±–æ—Ç–µ"""
    if context.user_data['mode'] == 'gpt':
        await gpt_dialog(update, context)
    elif context.user_data['mode'] == 'echo':
        message = update.message.text
        await send_text(update, context, message)
    elif context.user_data['mode'] == 'talk':
        await gpt_dialog(update, context)
    elif context.user_data['mode'] == 'quiz':
        await gpt_dialog(update, context)
    elif context.user_data['mode'] == 'recomend':
        context.user_data['recomend_wishes'] = update.message.text
        await gpt_dialog(update, context)
    else:
        await start(update, context)


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏—è 'echo'"""
    context.user_data['mode'] = 'echo'


async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏—è 'talk'"""
    context.user_data['mode'] = 'talk'
    message = load_message('talk')
    await send_text_buttons(update, context, message, {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω - –°–æ–ª–∏—Å—Ç –≥—Ä—É–ø–ø—ã Nirvana',
        'talk_queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II - –ö–æ—Ä–æ–ª–µ–≤–∞ –°–æ–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞',
        'talk_tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –ö–æ–ª–µ—Ü"',
        'talk_nietzsche': '–§–∏–ª–æ—Å–æ—Ñ',
        'talk_hawking': '–§–∏–∑–∏–∫'})


async def talk_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
    await update.callback_query.answer()
    query = update.callback_query.data
    prompt = load_prompt(query)
    chat_gpt.set_prompt(prompt)
    text = load_message(query)
    await send_image(update, context, query)
    await send_text(update, context, text)


async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏—è 'quiz'"""
    context.user_data['mode'] = 'quiz'
    message = load_message('quiz')
    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, message, {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ python',
        'quiz_math': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏, —Ç–µ–æ—Ä–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Ç–µ–æ—Ä–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤ –∏ –º–∞—Ç–∞–Ω–∞–ª–∏–∑–∞',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è'
    })


async def quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∫–≤–∏–∑–∞"""
    await update.callback_query.answer()
    query = update.callback_query.data
    if query != 'quiz_more':
        context.user_data['right_answers'] = 0
        prompt = load_prompt('quiz')
        chat_gpt.set_prompt(prompt)
    message = await send_text(update, context, '–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...')
    question_gpt = await chat_gpt.add_message(query)
    await message.edit_text(question_gpt)


async def recomend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏—è 'recomend'"""
    context.user_data['recomend_type'] = None
    context.user_data['recomend_wishes'] = None
    context.user_data['mode'] = 'recomend'
    message = load_message('recomend')
    await send_image(update, context, 'recomend')
    await send_text_buttons(update, context, message, {
        'recomend_book': '–ö–Ω–∏–≥–∞',
        'recomend_film': '–§–∏–ª—å–º',
    })


async def recomend_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–±—ã—Ç–∏–∏ 'recomend'"""
    await update.callback_query.answer()
    query = update.callback_query.data
    buttons = {}
    context.user_data['recomend_type'] = None
    context.user_data['recomend_wishes'] = None
    if query == 'recomend_book':
        buttons = {'type_book_poetry': '–ü–æ–∑–∑–∏—è',
                   'type_book_drama': '–î—Ä–∞–º–∞',
                   'type_book_prose': '–ü—Ä–æ–∑–∞'}
    elif query == 'recomend_film':
        buttons = {'type_film_action': '–ë–æ–µ–≤–∏–∫',
                   'type_film_comedy': '–ö–æ–º–µ–¥–∏—è',
                   'type_film_drama': '–î—Ä–∞–º–∞',
                   'type_film_thriller': '–¢—Ä–∏–ª–ª–µ—Ä',
                   'type_film_melodrama': '–ú–µ–ª–æ–¥—Ä–∞–º–∞'}
    message = load_message('recomend_type')
    await send_text_buttons(update, context, message, buttons)


async def recomend_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞"""
    await update.callback_query.answer()
    query = update.callback_query.data
    context.user_data['recomend_type'] = query
    message = load_message('recomend_wishes')
    await send_text(update, context, message)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    context.user_data['mode'] = None
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'echo': '–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'recomend': '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –∫–Ω–∏–≥–∏ üçøüìö'

    })


app = ApplicationBuilder().token("7696227821:AAHwXQV3-jZoBKCNvafDbi3D8eMQZo4gCnY").build()
chat_gpt = ChatGptService(ChatGPT_TOKEN)
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('echo', echo))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('recomend', recomend))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
app.add_handler(CallbackQueryHandler(talk_answer, pattern='^talk_.*'))
app.add_handler(CallbackQueryHandler(recomend_answer, pattern='^recomend_.*'))
app.add_handler(CallbackQueryHandler(recomend_type, pattern='^type_.*'))
app.add_handler(CallbackQueryHandler(quiz_answer, pattern='^quiz_.*'))
app.run_polling()